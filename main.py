import json
import hmac
import hashlib
import time
import threading
import urllib.request
import urllib.parse
import numpy as np
import websocket
import logging
import requests
import os
import math
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

# C·∫•u h√¨nh logging chi ti·∫øt
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(module)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('bot_errors.log')
    ]
)
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# L·∫•y c·∫•u h√¨nh t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
BINANCE_API_KEY = os.getenv('BINANCE_API_KEY', '')
BINANCE_SECRET_KEY = os.getenv('BINANCE_SECRET_KEY', '')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '')
    
# C·∫•u h√¨nh bot t·ª´ bi·∫øn m√¥i tr∆∞·ªùng (d·∫°ng JSON)
bot_config_json = os.getenv('BOT_CONFIGS', '[]')
try:
    BOT_CONFIGS = json.loads(bot_config_json)
except Exception as e:
    logging.error(f"L·ªói ph√¢n t√≠ch c·∫•u h√¨nh BOT_CONFIGS: {e}")
    BOT_CONFIGS = []

API_KEY = BINANCE_API_KEY
API_SECRET = BINANCE_SECRET_KEY

# ========== H√ÄM G·ª¨I TELEGRAM V√Ä X·ª¨ L√ù L·ªñI ==========
def send_telegram(message, chat_id=None, reply_markup=None):
    """G·ª≠i th√¥ng b√°o qua Telegram v·ªõi x·ª≠ l√Ω l·ªói chi ti·∫øt"""
    if not TELEGRAM_BOT_TOKEN:
        logger.warning("C·∫•u h√¨nh Telegram Bot Token ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    chat_id = chat_id or TELEGRAM_CHAT_ID
    if not chat_id:
        logger.warning("C·∫•u h√¨nh Telegram Chat ID ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p")
        return
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "HTML"
    }
    
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, json=payload, timeout=15)
        if response.status_code != 200:
            error_msg = response.text
            logger.error(f"L·ªói g·ª≠i Telegram ({response.status_code}): {error_msg}")
    except Exception as e:
        logger.error(f"L·ªói k·∫øt n·ªëi Telegram: {str(e)}")

# ========== H√ÄM T·∫†O MENU TELEGRAM ==========
def create_menu_keyboard():
    """T·∫°o menu 3 n√∫t cho Telegram"""
    return {
        "keyboard": [
            [{"text": "üìä Danh s√°ch Bot"}],
            [{"text": "‚ûï Th√™m Bot"}, {"text": "‚õî D·ª´ng Bot"}],
            [{"text": "üí∞ S·ªë d∆∞ t√†i kho·∫£n"}, {"text": "üìà V·ªã th·∫ø ƒëang m·ªü"}]
        ],
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

def create_cancel_keyboard():
    """T·∫°o b√†n ph√≠m h·ªßy"""
    return {
        "keyboard": [[{"text": "‚ùå H·ªßy b·ªè"}]],
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_symbols_keyboard():
    """T·∫°o b√†n ph√≠m ch·ªçn c·∫∑p coin"""
    popular_symbols = ["SUIUSDT", "DOGEUSDT", "1000PEPEUSDT", "TRUMPUSDT", "XRPUSDT", "ADAUSDT"]
    keyboard = []
    row = []
    for symbol in popular_symbols:
        row.append({"text": symbol})
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

def create_leverage_keyboard():
    """T·∫°o b√†n ph√≠m ch·ªçn ƒë√≤n b·∫©y"""
    leverages = ["10", "20", "30", "50", "75", "100"]
    keyboard = []
    row = []
    for lev in leverages:
        row.append({"text": f"‚öñÔ∏è {lev}x"})
        if len(row) == 3:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": True
    }

# ========== H√ÄM H·ªñ TR·ª¢ API BINANCE V·ªöI X·ª¨ L√ù L·ªñI CHI TI·∫æT ==========
def sign(query):
    try:
        return hmac.new(API_SECRET.encode(), query.encode(), hashlib.sha256).hexdigest()
    except Exception as e:
        logger.error(f"L·ªói t·∫°o ch·ªØ k√Ω: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI SIGN:</b> {str(e)}")
        return ""

def binance_api_request(url, method='GET', params=None, headers=None):
    """H√†m t·ªïng qu√°t cho c√°c y√™u c·∫ßu API Binance v·ªõi x·ª≠ l√Ω l·ªói chi ti·∫øt"""
    max_retries = 3
    for attempt in range(max_retries):
        try:
            if method.upper() == 'GET':
                if params:
                    query = urllib.parse.urlencode(params)
                    url = f"{url}?{query}"
                req = urllib.request.Request(url, headers=headers or {})
            else:
                data = urllib.parse.urlencode(params).encode() if params else None
                req = urllib.request.Request(url, data=data, headers=headers or {}, method=method)
            
            with urllib.request.urlopen(req, timeout=15) as response:
                if response.status == 200:
                    return json.loads(response.read().decode())
                else:
                    logger.error(f"L·ªói API ({response.status}): {response.read().decode()}")
                    if response.status == 429:  # Rate limit
                        time.sleep(2 ** attempt)  # Exponential backoff
                    elif response.status >= 500:
                        time.sleep(1)
                    continue
        except urllib.error.HTTPError as e:
            logger.error(f"L·ªói HTTP ({e.code}): {e.reason}")
            if e.code == 429:  # Rate limit
                time.sleep(2 ** attempt)  # Exponential backoff
            elif e.code >= 500:
                time.sleep(1)
            continue
        except Exception as e:
            logger.error(f"L·ªói k·∫øt n·ªëi API: {str(e)}")
            time.sleep(1)
    
    logger.error(f"Kh√¥ng th·ªÉ th·ª±c hi·ªán y√™u c·∫ßu API sau {max_retries} l·∫ßn th·ª≠")
    return None

def get_step_size(symbol):
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    try:
        data = binance_api_request(url)
        if not data:
            return 0.001
            
        for s in data['symbols']:
            if s['symbol'] == symbol.upper():
                for f in s['filters']:
                    if f['filterType'] == 'LOT_SIZE':
                        return float(f['stepSize'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y step size: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI STEP SIZE:</b> {symbol} - {str(e)}")
    return 0.001

def set_leverage(symbol, lev):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "leverage": lev,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v1/leverage?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': API_KEY}
        
        response = binance_api_request(url, method='POST', headers=headers)
        if response and 'leverage' in response:
            return True
    except Exception as e:
        logger.error(f"L·ªói thi·∫øt l·∫≠p ƒë√≤n b·∫©y: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI ƒê√íN B·∫®Y:</b> {symbol} - {str(e)}")
    return False

def get_balance():
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v2/account?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': API_KEY}
        
        data = binance_api_request(url, headers=headers)
        if not data:
            return 0
            
        for asset in data['assets']:
            if asset['asset'] == 'USDT':
                return float(asset['availableBalance'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y s·ªë d∆∞: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI S·ªê D∆Ø:</b> {str(e)}")
    return 0

def place_order(symbol, side, qty):
    try:
        ts = int(time.time() * 1000)
        params = {
            "symbol": symbol.upper(),
            "side": side,
            "type": "MARKET",
            "quantity": qty,
            "timestamp": ts
        }
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v1/order?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': API_KEY}
        
        return binance_api_request(url, method='POST', headers=headers)
    except Exception as e:
        logger.error(f"L·ªói ƒë·∫∑t l·ªánh: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI ƒê·∫∂T L·ªÜNH:</b> {symbol} - {str(e)}")
    return None

def cancel_all_orders(symbol):
    try:
        ts = int(time.time() * 1000)
        params = {"symbol": symbol.upper(), "timestamp": ts}
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v1/allOpenOrders?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': API_KEY}
        
        binance_api_request(url, method='DELETE', headers=headers)
        return True
    except Exception as e:
        logger.error(f"L·ªói h·ªßy l·ªánh: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI H·ª¶Y L·ªÜNH:</b> {symbol} - {str(e)}")
    return False

def get_current_price(symbol):
    try:
        url = f"https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol.upper()}"
        data = binance_api_request(url)
        if data and 'price' in data:
            return float(data['price'])
    except Exception as e:
        logger.error(f"L·ªói l·∫•y gi√°: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI GI√Å:</b> {symbol} - {str(e)}")
    return 0

def get_positions(symbol=None):
    try:
        ts = int(time.time() * 1000)
        params = {"timestamp": ts}
        if symbol:
            params["symbol"] = symbol.upper()
            
        query = urllib.parse.urlencode(params)
        sig = sign(query)
        url = f"https://fapi.binance.com/fapi/v2/positionRisk?{query}&signature={sig}"
        headers = {'X-MBX-APIKEY': API_KEY}
        
        positions = binance_api_request(url, headers=headers)
        if not positions:
            return []
            
        if symbol:
            for pos in positions:
                if pos['symbol'] == symbol.upper():
                    return [pos]
            
        return positions
    except Exception as e:
        logger.error(f"L·ªói l·∫•y v·ªã th·∫ø: {str(e)}")
        send_telegram(f"‚ö†Ô∏è <b>L·ªñI V·ªä TH·∫æ:</b> {symbol if symbol else ''} - {str(e)}")
    return []

# ========== T√çNH CH·ªà B√ÅO K·ª∏ THU·∫¨T N√ÇNG CAO ==========
def calc_rsi(prices, period=14):
    try:
        if len(prices) < period + 1:
            return None
        
        deltas = np.diff(prices)
        gains = np.where(deltas > 0, deltas, 0)
        losses = np.where(deltas < 0, -deltas, 0)
        
        avg_gain = np.mean(gains[:period])
        avg_loss = np.mean(losses[:period])
        
        if avg_loss == 0:
            return 100.0
        
        rs = avg_gain / avg_loss
        return 100.0 - (100.0 / (1 + rs))
    except Exception as e:
        logger.error(f"L·ªói t√≠nh RSI: {str(e)}")
        return None

def calc_ema(prices, period):
    """T√≠nh Exponential Moving Average (EMA)"""
    if len(prices) < period:
        return None
        
    # T√≠nh SMA ƒë·∫ßu ti√™n
    sma = np.mean(prices[:period])
    emas = [sma]
    
    # H·ªá s·ªë nh√¢n
    multiplier = 2 / (period + 1)
    
    # T√≠nh EMA cho c√°c ƒëi·ªÉm ti·∫øp theo
    for price in prices[period:]:
        ema = (price - emas[-1]) * multiplier + emas[-1]
        emas.append(ema)
    
    return emas[-1]

def calc_macd(prices, fast=12, slow=26, signal=9):
    """T√≠nh MACD v√† ƒë∆∞·ªùng t√≠n hi·ªáu"""
    if len(prices) < slow + signal:
        return None, None
        
    ema_fast = calc_ema(prices, fast)
    ema_slow = calc_ema(prices, slow)
    
    if ema_fast is None or ema_slow is None:
        return None, None
        
    macd_line = ema_fast - ema_slow
    
    # T√≠nh ƒë∆∞·ªùng t√≠n hi·ªáu (EMA c·ªßa MACD)
    # L·∫•y gi√° tr·ªã MACD cho signal_period
    if len(prices) >= slow + signal:
        # Ch·ªâ l·∫•y c√°c gi√° tr·ªã MACD c·∫ßn thi·∫øt
        macd_values = []
        for i in range(len(prices) - slow + 1):
            fast_ema = calc_ema(prices[i:i+fast], fast)
            slow_ema = calc_ema(prices[i:i+slow], slow)
            if fast_ema is not None and slow_ema is not None:
                macd_values.append(fast_ema - slow_ema)
        
        # T√≠nh EMA c·ªßa MACD cho ƒë∆∞·ªùng t√≠n hi·ªáu
        macd_signal = calc_ema(macd_values[-signal:], signal)
    else:
        macd_signal = None
    
    return macd_line, macd_signal

def calc_bollinger_bands(prices, period=20, std_dev=2):
    """T√≠nh Bollinger Bands"""
    if len(prices) < period:
        return None, None, None
        
    sma = np.mean(prices[-period:])
    std = np.std(prices[-period:])
    
    upper_band = sma + (std * std_dev)
    lower_band = sma - (std * std_dev)
    
    return upper_band, sma, lower_band

def calc_stochastic(prices, lows, highs, period=14, k_period=3):
    """T√≠nh Stochastic Oscillator"""
    if len(prices) < period + k_period or len(lows) < period or len(highs) < period:
        return None, None
        
    current_close = prices[-1]
    low_min = min(lows[-period:])
    high_max = max(highs[-period:])
    
    if high_max - low_min == 0:
        return None, None
        
    k = 100 * (current_close - low_min) / (high_max - low_min)
    
    # T√≠nh %D (signal line)
    d_values = [k]
    for i in range(2, k_period+1):
        if len(prices) < period + i:
            continue
        prev_close = prices[-i]
        prev_low = min(lows[-period-i:-i] or [0])
        prev_high = max(highs[-period-i:-i] or [1])
        if prev_high - prev_low == 0:
            continue
        d_val = 100 * (prev_close - prev_low) / (prev_high - prev_low)
        d_values.append(d_val)
    
    d = np.mean(d_values) if d_values else None
    
    return k, d

def calc_vwma(prices, volumes, period=20):
    """T√≠nh Volume Weighted Moving Average (VWMA)"""
    if len(prices) < period or len(volumes) < period:
        return None
        
    prices_slice = prices[-period:]
    volumes_slice = volumes[-period:]
    total_volume = sum(volumes_slice)
    
    if total_volume == 0:
        return None
        
    return sum(p * v for p, v in zip(prices_slice, volumes_slice)) / total_volume

def calc_atr(highs, lows, closes, period=14):
    """T√≠nh Average True Range (ATR)"""
    if len(highs) < period or len(lows) < period or len(closes) < period:
        return None
        
    tr = []
    for i in range(1, len(closes)):
        h = highs[i]
        l = lows[i]
        pc = closes[i-1]
        tr.append(max(h-l, abs(h-pc), abs(l-pc)))
    
    return np.mean(tr[-period:]) if tr else None

# ========== QU·∫¢N L√ù WEBSOCKET HI·ªÜU QU·∫¢ V·ªöI KI·ªÇM SO√ÅT L·ªñI ==========
class WebSocketManager:
    def __init__(self):
        self.connections = {}
        self.executor = ThreadPoolExecutor(max_workers=10)
        self._lock = threading.Lock()
        self._stop_event = threading.Event()
        
    def add_symbol(self, symbol, callback):
        symbol = symbol.upper()
        with self._lock:
            if symbol not in self.connections:
                self._create_connection(symbol, callback)
                
    def _create_connection(self, symbol, callback):
        if self._stop_event.is_set():
            return
            
        # S·ª≠ d·ª•ng k√™nh kline 1 ph√∫t ƒë·ªÉ l·∫•y th√™m d·ªØ li·ªáu
        stream = f"{symbol.lower()}@kline_1m"
        url = f"wss://fstream.binance.com/ws/{stream}"
        
        def on_message(ws, message):
            try:
                data = json.loads(message)
                kline = data.get('k', {})
                if kline and kline.get('x'):  # Ch·ªâ x·ª≠ l√Ω khi n·∫øn ƒë√£ ƒë√≥ng
                    close = float(kline['c'])
                    volume = float(kline['v'])
                    high = float(kline['h'])
                    low = float(kline['l'])
                    self.executor.submit(callback, close, volume, high, low)
            except Exception as e:
                logger.error(f"L·ªói x·ª≠ l√Ω tin nh·∫Øn WebSocket {symbol}: {str(e)}")
                
        def on_error(ws, error):
            logger.error(f"L·ªói WebSocket {symbol}: {str(error)}")
            if not self._stop_event.is_set():
                time.sleep(5)
                self._reconnect(symbol, callback)
            
        def on_close(ws, close_status_code, close_msg):
            logger.info(f"WebSocket ƒë√≥ng {symbol}: {close_status_code} - {close_msg}")
            if not self._stop_event.is_set() and symbol in self.connections:
                time.sleep(5)
                self._reconnect(symbol, callback)
                
        ws = websocket.WebSocketApp(
            url,
            on_message=on_message,
            on_error=on_error,
            on_close=on_close
        )
        
        thread = threading.Thread(target=ws.run_forever, daemon=True)
        thread.start()
        
        self.connections[symbol] = {
            'ws': ws,
            'thread': thread,
            'callback': callback
        }
        logger.info(f"WebSocket b·∫Øt ƒë·∫ßu cho {symbol} (kline_1m)")
        
    def _reconnect(self, symbol, callback):
        logger.info(f"K·∫øt n·ªëi l·∫°i WebSocket cho {symbol}")
        self.remove_symbol(symbol)
        self._create_connection(symbol, callback)
        
    def remove_symbol(self, symbol):
        symbol = symbol.upper()
        with self._lock:
            if symbol in self.connections:
                try:
                    self.connections[symbol]['ws'].close()
                except Exception as e:
                    logger.error(f"L·ªói ƒë√≥ng WebSocket {symbol}: {str(e)}")
                del self.connections[symbol]
                logger.info(f"WebSocket ƒë√£ x√≥a cho {symbol}")
                
    def stop(self):
        self._stop_event.set()
        for symbol in list(self.connections.keys()):
            self.remove_symbol(symbol)

# ========== BOT CH√çNH V·ªöI CHI·∫æN L∆Ø·ª¢C GIAO D·ªäCH N√ÇNG CAO ==========
class IndicatorBot:
    def __init__(self, symbol, lev, percent, tp, sl, ws_manager=None):
        self.symbol = symbol.upper()
        self.lev = lev
        self.percent = percent
        self.tp = tp
        self.sl = sl
        
        self.ws_manager = ws_manager
        self.status = "waiting"
        self.side = ""
        self.qty = 0
        self.entry = 0
        self.prices = []
        self.volumes = []
        self.highs = []
        self.lows = []
        self.closes = []
        self._stop = False
        self.position_open = False
        self.last_trade_time = 0
        self.position_check_interval = 60
        self.last_position_check = 0
        self.last_error_log_time = 0
        self.last_close_time = 0
        self.cooldown_period = 60
        self.max_position_attempts = 3
        self.position_attempt_count = 0
        self.dynamic_sl = sl  # SL ƒë·ªông c√≥ th·ªÉ thay ƒë·ªïi
        self.best_profit = 0  # Theo d√µi l·ª£i nhu·∫≠n t·ªët nh·∫•t ƒë·ªÉ trailing stop
        
        # ƒêƒÉng k√Ω v·ªõi WebSocket Manager
        self.ws_manager.add_symbol(self.symbol, self._handle_price_update)
        
        # T·∫£i d·ªØ li·ªáu l·ªãch s·ª≠
        self._fetch_initial_data()
        
        # B·∫Øt ƒë·∫ßu thread ch√≠nh
        self.thread = threading.Thread(target=self._run, daemon=True)
        self.thread.start()
        self.log(f"üü¢ Bot kh·ªüi ƒë·ªông cho {self.symbol}")

    def _fetch_initial_data(self, limit=200):
        """T·∫£i d·ªØ li·ªáu n·∫øn l·ªãch s·ª≠ khi kh·ªüi ƒë·ªông bot"""
        try:
            # L·∫•y d·ªØ li·ªáu n·∫øn 1 ph√∫t
            url = "https://fapi.binance.com/fapi/v1/klines"
            params = {
                "symbol": self.symbol,
                "interval": "1m",
                "limit": limit
            }
            data = binance_api_request(url, params=params)
            if not data:
                return

            # X·ª≠ l√Ω d·ªØ li·ªáu n·∫øn
            for candle in data:
                self.closes.append(float(candle[4]))
                self.highs.append(float(candle[2]))
                self.lows.append(float(candle[3]))
                self.volumes.append(float(candle[5]))
                self.prices.append(float(candle[4]))  # Gi√° ƒë√≥ng c·ª≠a

            # Log th√¥ng b√°o
            self.log(f"ƒê√£ t·∫£i {len(data)} n·∫øn l·ªãch s·ª≠")

        except Exception as e:
            self.log(f"L·ªói khi t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠: {str(e)}")

    def log(self, message):
        """Ghi log v√† g·ª≠i qua Telegram"""
        logger.info(f"[{self.symbol}] {message}")
        send_telegram(f"<b>{self.symbol}</b>: {message}")

    def log_signal_conditions(self, signal_type, conditions):
        """Ghi log chi ti·∫øt ƒëi·ªÅu ki·ªán t√≠n hi·ªáu"""
        message = f"üìä {self.symbol} T√çN HI·ªÜU {signal_type}:\n"
        for i, cond in enumerate(conditions, 1):
            message += f"ƒêK {i}: {'‚úÖ' if cond else '‚ùå'}\n"
        self.log(message)

    def _handle_price_update(self, close, volume, high, low):
        if self._stop: 
            return
            
        self.prices.append(close)
        self.volumes.append(volume)
        self.highs.append(high)
        self.lows.append(low)
        self.closes.append(close)
        
        # Gi·ªõi h·∫°n l·ªãch s·ª≠ ƒë·ªÉ ti·∫øt ki·ªám b·ªô nh·ªõ
        max_history = 200
        if len(self.prices) > max_history:
            self.prices = self.prices[-max_history:]
        if len(self.volumes) > max_history:
            self.volumes = self.volumes[-max_history:]
        if len(self.highs) > max_history:
            self.highs = self.highs[-max_history:]
        if len(self.lows) > max_history:
            self.lows = self.lows[-max_history:]
        if len(self.closes) > max_history:
            self.closes = self.closes[-max_history:]

    def _run(self):
        """Lu·ªìng ch√≠nh qu·∫£n l√Ω bot v·ªõi ki·ªÉm so√°t l·ªói ch·∫∑t ch·∫Ω"""
        while not self._stop:
            try:
                current_time = time.time()
                
                # Ki·ªÉm tra tr·∫°ng th√°i v·ªã th·∫ø ƒë·ªãnh k·ª≥
                if current_time - self.last_position_check > self.position_check_interval:
                    self.check_position_status()
                    self.last_position_check = current_time
                
                # X·ª≠ l√Ω logic giao d·ªãch
                if not self.position_open and self.status == "waiting":
                    # Ki·ªÉm tra th·ªùi gian ch·ªù sau khi ƒë√≥ng l·ªánh
                    if current_time - self.last_close_time < self.cooldown_period:
                        time.sleep(1)
                        continue
                    
                    signal = self.get_signal()
                    
                    if signal and current_time - self.last_trade_time > 60:
                        self.open_position(signal)
                        self.last_trade_time = current_time
                
                # Ki·ªÉm tra TP/SL cho v·ªã th·∫ø ƒëang m·ªü
                if self.position_open and self.status == "open":
                    self.check_tp_sl()
                
                time.sleep(1)
                
            except Exception as e:
                if time.time() - self.last_error_log_time > 10:
                    self.log(f"L·ªói h·ªá th·ªëng: {str(e)}")
                    self.last_error_log_time = time.time()
                time.sleep(5)

    def stop(self):
        self._stop = True
        self.ws_manager.remove_symbol(self.symbol)
        try:
            cancel_all_orders(self.symbol)
        except Exception as e:
            if time.time() - self.last_error_log_time > 10:
                self.log(f"L·ªói h·ªßy l·ªánh: {str(e)}")
                self.last_error_log_time = time.time()
        self.log(f"üî¥ Bot d·ª´ng cho {self.symbol}")

    def check_position_status(self):
        """Ki·ªÉm tra tr·∫°ng th√°i v·ªã th·∫ø t·ª´ API Binance v·ªõi ki·ªÉm so√°t l·ªói"""
        try:
            positions = get_positions(self.symbol)
            
            if not positions or len(positions) == 0:
                self.position_open = False
                self.status = "waiting"
                self.side = ""
                self.qty = 0
                self.entry = 0
                return
            
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    position_amt = float(pos.get('positionAmt', 0))
                    
                    if abs(position_amt) > 0:
                        self.position_open = True
                        self.status = "open"
                        self.side = "BUY" if position_amt > 0 else "SELL"
                        self.qty = position_amt
                        self.entry = float(pos.get('entryPrice', 0))
                        return
            
            self.position_open = False
            self.status = "waiting"
            self.side = ""
            self.qty = 0
            self.entry = 0
            
        except Exception as e:
            if time.time() - self.last_error_log_time > 10:
                self.log(f"L·ªói ki·ªÉm tra v·ªã th·∫ø: {str(e)}")
                self.last_error_log_time = time.time()

    def calc_trend_strength(self, period=20):
        """T√≠nh s·ª©c m·∫°nh xu h∆∞·ªõng (ƒë·ªô d·ªëc) trong N phi√™n"""
        if len(self.prices) < period:
            return 0
        x = np.arange(period)
        y = np.array(self.prices[-period:])
        slope = np.polyfit(x, y, 1)[0]
        return slope * 100  # Tr·∫£ v·ªÅ % thay ƒë·ªïi/phi√™n

    def check_bullish_divergence(self):
        """Ph√°t hi·ªán ph√¢n k·ª≥ tƒÉng gi·ªØa gi√° v√† RSI"""
        if len(self.prices) < 10 or len(self.closes) < 10:
            return False
            
        # T√¨m ƒë√°y g·∫ßn nh·∫•t
        min_idx = np.argmin(self.closes[-10:])
        min_price = self.closes[-10:][min_idx]
        
        # So s√°nh v·ªõi ƒë√°y tr∆∞·ªõc ƒë√≥
        prev_low = min(self.closes[-20:-10]) if len(self.closes) >= 20 else min_price
        
        # T√≠nh RSI t∆∞∆°ng ·ª©ng
        rsi_current = calc_rsi(self.prices[-10:], 14)
        rsi_prev = calc_rsi(self.prices[-20:-10], 14) if len(self.prices) >= 20 else rsi_current
        
        # Ph√¢n k·ª≥ tƒÉng: Gi√° t·∫°o ƒë√°y th·∫•p h∆°n nh∆∞ng RSI cao h∆°n
        return min_price < prev_low and rsi_current > rsi_prev

    def check_bearish_divergence(self):
        """Ph√°t hi·ªán ph√¢n k·ª≥ gi·∫£m gi·ªØa gi√° v√† RSI"""
        if len(self.prices) < 10 or len(self.closes) < 10:
            return False
            
        # T√¨m ƒë·ªânh g·∫ßn nh·∫•t
        max_idx = np.argmax(self.closes[-10:])
        max_price = self.closes[-10:][max_idx]
        
        # So s√°nh v·ªõi ƒë·ªânh tr∆∞·ªõc ƒë√≥
        prev_high = max(self.closes[-20:-10]) if len(self.closes) >= 20 else max_price
        
        # T√≠nh RSI t∆∞∆°ng ·ª©ng
        rsi_current = calc_rsi(self.prices[-10:], 14)
        rsi_prev = calc_rsi(self.prices[-20:-10], 14) if len(self.prices) >= 20 else rsi_current
        
        # Ph√¢n k·ª≥ gi·∫£m: Gi√° t·∫°o ƒë·ªânh cao h∆°n nh∆∞ng RSI th·∫•p h∆°n
        return max_price > prev_high and rsi_current < rsi_prev

    def get_signal(self):
        """T·∫°o t√≠n hi·ªáu v·ªõi b·ªô l·ªçc 3 l·ªõp v√† x√°c nh·∫≠n kh·ªëi l∆∞·ª£ng"""
        # Ki·ªÉm tra ƒë·ªß d·ªØ li·ªáu
        min_data = max(100, 50)  # Ch·ªâ c·∫ßn 50 n·∫øn cho chi·∫øn l∆∞·ª£c m·ªõi
        if len(self.prices) < min_data:
            return None
        
        try:
            # === L·ªöP 1: XU H∆Ø·ªöNG CH√çNH ===
            # EMA 50 v√† EMA 200 ƒë·ªÉ x√°c ƒë·ªãnh xu h∆∞·ªõng d√†i h·∫°n
            ema50 = calc_ema(self.prices, 50)
            ema200 = calc_ema(self.prices, 200)
            
            if ema50 is None or ema200 is None:
                return None
                
            trend_direction = 1 if ema50 > ema200 else -1  # 1: uptrend, -1: downtrend
            
            # T√≠nh s·ª©c m·∫°nh xu h∆∞·ªõng
            trend_strength = self.calc_trend_strength(20)
            
            # Ph√¢n lo·∫°i xu h∆∞·ªõng
            strong_uptrend = trend_direction == 1 and trend_strength > 0.2
            strong_downtrend = trend_direction == -1 and trend_strength < -0.2
            neutral_market = abs(trend_strength) <= 0.2
            
            # === L·ªöP 2: CH·ªà B√ÅO ƒê·ªòNG L∆Ø·ª¢NG ===
            # RSI v·ªõi v√πng qu√° mua/qu√° b√°n ƒëi·ªÅu ch·ªânh theo xu h∆∞·ªõng
            rsi = calc_rsi(self.prices, 14)
            if rsi is None:
                return None
                
            # ƒêi·ªÅu ch·ªânh ng∆∞·ª°ng RSI cho t√≠n hi·ªáu mua
            rsi_buy_threshold = 40 if trend_direction == 1 else 30  # Gi·∫£m ng∆∞·ª°ng mua trong uptrend

            # ƒêi·ªÅu ch·ªânh ng∆∞·ª°ng RSI cho t√≠n hi·ªáu b√°n
            rsi_sell_threshold = 65 if trend_direction == -1 else 70  # TƒÉng ng∆∞·ª°ng b√°n trong downtrend
            
            # MACD v·ªõi t√≠n hi·ªáu ph√¢n k·ª≥
            macd_line, macd_signal = calc_macd(self.prices, 12, 26, 9)
            
            # === L·ªöP 3: M√î H√åNH GI√Å ===
            # X√°c nh·∫≠n breakout v·ªõi Bollinger Bands
            upper_band, middle_band, lower_band = calc_bollinger_bands(self.prices, 20, 2)
            current_price = self.prices[-1]
            
            # === X√ÅC NH·∫¨N KH·ªêI L∆Ø·ª¢NG ===
            # So s√°nh kh·ªëi l∆∞·ª£ng hi·ªán t·∫°i v·ªõi trung b√¨nh
            if len(self.volumes) < 20:
                return None
                
            current_volume = self.volumes[-1]
            avg_volume = np.mean(self.volumes[-20:])
            volume_ok = current_volume > avg_volume * 1.3  # Kh·ªëi l∆∞·ª£ng > 130% trung b√¨nh
            
            # === T√çN HI·ªÜU MUA (BUY) ===
            buy_conditions = [
                # ƒêi·ªÅu ki·ªán mua trong uptrend m·∫°nh
                strong_uptrend and rsi < rsi_buy_threshold and current_price < middle_band,
                
                # ƒêi·ªÅu ki·ªán mua trong downtrend (ph·∫£n ƒë·∫£o)
                strong_downtrend and rsi < 30 and macd_line > macd_signal,
                
                # ƒêi·ªÅu ki·ªán mua trong th·ªã tr∆∞·ªùng trung l·∫≠p
                neutral_market and rsi < 35 and current_price < lower_band
            ]
            
            # === T√çN HI·ªÜU B√ÅN (SELL) ===
            sell_conditions = [
                # ƒêi·ªÅu ki·ªán b√°n trong downtrend m·∫°nh
                strong_downtrend and rsi > rsi_sell_threshold and current_price > middle_band,
                
                # ƒêi·ªÅu ki·ªán b√°n trong uptrend (ph·∫£n ƒë·∫£o)
                strong_uptrend and rsi > 70 and macd_line < macd_signal,
                
                # ƒêi·ªÅu ki·ªán b√°n trong th·ªã tr∆∞·ªùng trung l·∫≠p
                neutral_market and rsi > 65 and current_price > upper_band
            ]
            
            # === QUY·∫æT ƒê·ªäNH T√çN HI·ªÜU ===
            if any(buy_conditions) and volume_ok:
                # Ki·ªÉm tra th√™m ph√¢n k·ª≥ tƒÉng
                if self.check_bullish_divergence():
                    self.log_signal_conditions("MUA", buy_conditions)
                    return "BUY"
                    
            if any(sell_conditions) and volume_ok:
                # Ki·ªÉm tra th√™m ph√¢n k·ª≥ gi·∫£m
                if self.check_bearish_divergence():
                    self.log_signal_conditions("B√ÅN", sell_conditions)
                    return "SELL"
                    
            return None
            
        except Exception as e:
            self.log(f"L·ªói t·∫°o t√≠n hi·ªáu: {str(e)}")
            return None

    def check_tp_sl(self):
        """Qu·∫£n l√Ω TP/SL th√≠ch ·ª©ng v·ªõi bi·∫øn ƒë·ªông th·ªã tr∆∞·ªùng"""
        if not self.position_open:
            return
            
        try:
            current_price = self.prices[-1] if self.prices else get_current_price(self.symbol)
            if current_price <= 0:
                return
                
            # T√≠nh % thay ƒë·ªïi gi√°
            price_change_pct = ((current_price - self.entry) / self.entry) * 100
            if self.side == "SELL":
                price_change_pct = -price_change_pct
                
            # T√≠nh ATR ƒë·ªÉ x√°c ƒë·ªãnh bi·∫øn ƒë·ªông
            atr = calc_atr(self.highs, self.lows, self.closes, 14)
            if atr:
                # ƒêi·ªÅu ch·ªânh SL ƒë·ªông d·ª±a tr√™n ATR
                atr_pct = (atr / self.entry) * 100
                dynamic_sl = max(1.0, min(self.sl, 2.0 * atr_pct))
            else:
                dynamic_sl = self.sl
                
            # ƒêi·ªÅu ch·ªânh SL theo h∆∞·ªõng c√≥ l·ª£i (Trailing Stop)
            if price_change_pct > 0:
                # D·ªãch chuy·ªÉn SL l√™n khi c√≥ l·ª£i nhu·∫≠n
                new_sl_level = price_change_pct * 0.7  # Gi·ªØ 70% l·ª£i nhu·∫≠n
                if new_sl_level > self.best_profit:
                    self.best_profit = new_sl_level
                    self.dynamic_sl = max(self.dynamic_sl, -new_sl_level)
            
            # Ki·ªÉm tra TP/SL
            if price_change_pct >= self.tp:
                self.close_position(f"‚úÖ ƒê·∫°t TP {self.tp}%")
            elif price_change_pct <= -dynamic_sl:
                self.close_position(f"‚ùå ƒê·∫°t SL {dynamic_sl:.2f}%")
                
        except Exception as e:
            self.log(f"L·ªói ki·ªÉm tra TP/SL: {str(e)}")

    def close_position(self, reason=""):
        """ƒê√≥ng v·ªã th·∫ø v·ªõi s·ªë l∆∞·ª£ng ch√≠nh x√°c, ki·ªÉm tra k·∫øt qu·∫£ t·ª´ Binance"""
        try:
            # Ki·ªÉm tra l·∫°i tr·∫°ng th√°i tr∆∞·ªõc khi ƒë√≥ng
            self.check_position_status()
            if not self.position_open:
                return
                
            # L·∫•y th√¥ng tin v·ªã th·∫ø M·ªöI NH·∫§T t·ª´ API
            positions = get_positions(self.symbol)
            if not positions:
                return
                
            # T√¨m v·ªã th·∫ø ch√≠nh x√°c
            current_qty = 0
            for pos in positions:
                if pos['symbol'] == self.symbol:
                    current_qty = float(pos.get('positionAmt', 0))
                    break
                    
            if current_qty == 0:
                self.position_open = False
                self.status = "waiting"
                return
                
            # X√°c ƒë·ªãnh h∆∞·ªõng ƒë√≥ng
            close_side = "SELL" if current_qty > 0 else "BUY"
            close_qty = abs(current_qty)
            
            # L√†m tr√≤n s·ªë l∆∞·ª£ng CH√çNH X√ÅC theo step size c·ªßa Binance
            step = get_step_size(self.symbol)
            if step > 0:
                # T√≠nh to√°n ch√≠nh x√°c s·ªë b∆∞·ªõc
                steps = close_qty / step
                # L√†m tr√≤n xu·ªëng (floor) ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng hi·ªán c√≥
                close_qty = math.floor(steps) * step
            
            # ƒê·∫£m b·∫£o s·ªë l∆∞·ª£ng t·ªëi thi·ªÉu
            min_qty = step
            if close_qty < min_qty:
                close_qty = abs(current_qty)  # D√πng s·ªë l∆∞·ª£ng g·ªëc n·∫øu qu√° nh·ªè
            
            # ƒê·∫∑t l·ªánh ƒë√≥ng v·ªõi s·ªë l∆∞·ª£ng CH√çNH X√ÅC
            res = place_order(self.symbol, close_side, close_qty)
            if res:
                executed_qty = float(res.get('executedQty', 0))
                
                # Ki·ªÉm tra xem ƒë√£ ƒë√≥ng h·∫øt ch∆∞a
                if executed_qty >= abs(current_qty) * 0.99:  # Cho ph√©p sai s·ªë 1%
                    # Th√¥ng b√°o th√†nh c√¥ng
                    price = float(res.get('avgPrice', 0))
                    message = (
                        f"‚õî <b>ƒê√É ƒê√ìNG V·ªä TH·∫æ {self.symbol}</b>\n"
                        f"üìå L√Ω do: {reason}\n"
                        f"üè∑Ô∏è Gi√° ra: {price:.4f}\n"
                        f"üìä Kh·ªëi l∆∞·ª£ng: {executed_qty}\n"
                        f"üíµ Gi√° tr·ªã: {executed_qty * price:.2f} USDT"
                    )
                    self.log(message)
                    
                    # C·∫≠p nh·∫≠t tr·∫°ng th√°i NGAY L·∫¨P T·ª®C
                    self.status = "waiting"
                    self.side = ""
                    self.qty = 0
                    self.entry = 0
                    self.position_open = False
                    self.last_trade_time = time.time()
                    self.last_close_time = time.time()
                else:
                    # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p ƒë√≥ng kh√¥ng h·∫øt
                    remaining = abs(current_qty) - executed_qty
                    self.log(f"‚ö†Ô∏è ƒê√≥ng ch∆∞a h·∫øt! C√≤n l·∫°i: {remaining}, th·ª≠ ƒë√≥ng ph·∫ßn c√≤n l·∫°i")
                    
                    # Th·ª≠ ƒë√≥ng ph·∫ßn c√≤n l·∫°i
                    retry_qty = remaining
                    if step > 0:
                        retry_steps = retry_qty / step
                        retry_qty = math.floor(retry_steps) * step
                    
                    if retry_qty >= min_qty:
                        retry_res = place_order(self.symbol, close_side, retry_qty)
                        if retry_res:
                            total_executed = executed_qty + float(retry_res.get('executedQty', 0))
                            self.log(f"‚úÖ ƒê√£ ƒë√≥ng th√™m: {total_executed - executed_qty}, t·ªïng: {total_executed}")
                            
                            # C·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu ƒë√≥ng th√†nh c√¥ng
                            if total_executed >= abs(current_qty) * 0.99:
                                self.status = "waiting"
                                self.side = ""
                                self.qty = 0
                                self.entry = 0
                                self.position_open = False
                        else:
                            self.log("‚ùå L·ªói khi ƒë√≥ng ph·∫ßn c√≤n l·∫°i")
                    else:
                        self.log(f"‚ö†Ô∏è S·ªë l∆∞·ª£ng c√≤n l·∫°i qu√° nh·ªè ({retry_qty}), kh√¥ng th·ªÉ ƒë√≥ng")
            else:
                self.log(f"‚ùå L·ªói khi ƒë·∫∑t l·ªánh ƒë√≥ng")
        except Exception as e:
            self.log(f"‚ùå L·ªói nghi√™m tr·ªçng khi ƒë√≥ng l·ªánh: {str(e)}")

    def open_position(self, side):
        # Ki·ªÉm tra l·∫°i tr·∫°ng th√°i tr∆∞·ªõc khi v√†o l·ªánh
        self.check_position_status()
        
        if self.position_open:
            self.log(f"‚ö†Ô∏è ƒê√£ c√≥ v·ªã th·∫ø m·ªü, kh√¥ng v√†o l·ªánh m·ªõi")
            return
            
        try:
            # H·ªßy l·ªánh t·ªìn ƒë·ªçng
            cancel_all_orders(self.symbol)
            
            # ƒê·∫∑t ƒë√≤n b·∫©y
            if not set_leverage(self.symbol, self.lev):
                self.log(f"Kh√¥ng th·ªÉ ƒë·∫∑t ƒë√≤n b·∫©y {self.lev}")
                return
            
            # T√≠nh to√°n kh·ªëi l∆∞·ª£ng
            balance = get_balance()
            if balance <= 0:
                self.log(f"Kh√¥ng ƒë·ªß s·ªë d∆∞ USDT")
                return
            
            # Gi·ªõi h·∫°n % s·ªë d∆∞ s·ª≠ d·ª•ng
            if self.percent > 100:
                self.percent = 100
            elif self.percent < 1:
                self.percent = 1
                
            usdt_amount = balance * (self.percent / 100)
            price = get_current_price(self.symbol)
            if price <= 0:
                self.log(f"L·ªói l·∫•y gi√°")
                return
                
            step = get_step_size(self.symbol)
            if step <= 0:
                step = 0.001
            
            # T√≠nh s·ªë l∆∞·ª£ng v·ªõi ƒë√≤n b·∫©y
            qty = (usdt_amount * self.lev) / price
            
            # L√†m tr√≤n s·ªë l∆∞·ª£ng theo step size (lu√¥n l√†m tr√≤n xu·ªëng)
            if step > 0:
                steps = qty / step
                qty = math.floor(steps) * step  # Lu√¥n l√†m tr√≤n xu·ªëng
            
            qty = max(qty, 0)
            qty = round(qty, 8)
            
            min_qty = step
            
            if qty < min_qty:
                self.log(f"‚ö†Ô∏è S·ªë l∆∞·ª£ng qu√° nh·ªè ({qty}), kh√¥ng ƒë·∫∑t l·ªánh")
                return
                
            # Gi·ªõi h·∫°n s·ªë l·∫ßn th·ª≠
            self.position_attempt_count += 1
            if self.position_attempt_count > self.max_position_attempts:
                self.log(f"‚ö†Ô∏è ƒê√£ ƒë·∫°t gi·ªõi h·∫°n s·ªë l·∫ßn th·ª≠ m·ªü l·ªánh ({self.max_position_attempts})")
                self.position_attempt_count = 0
                return
                
            # ƒê·∫∑t l·ªánh
            res = place_order(self.symbol, side, qty)
            if not res:
                self.log(f"L·ªói khi ƒë·∫∑t l·ªánh")
                return
                
            executed_qty = float(res.get('executedQty', 0))
            if executed_qty <= 0:
                self.log(f"L·ªánh kh√¥ng kh·ªõp, s·ªë l∆∞·ª£ng th·ª±c thi: {executed_qty}")
                return

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i
            self.entry = float(res.get('avgPrice', price))
            self.side = side
            self.qty = executed_qty if side == "BUY" else -executed_qty
            self.status = "open"
            self.position_open = True
            self.position_attempt_count = 0  # Reset s·ªë l·∫ßn th·ª≠
            self.best_profit = 0  # Reset l·ª£i nhu·∫≠n t·ªët nh·∫•t
            
            # Th√¥ng b√°o qua Telegram
            message = (
                f"‚úÖ <b>ƒê√É M·ªû V·ªä TH·∫æ {self.symbol}</b>\n"
                f"üìå H∆∞·ªõng: {side}\n"
                f"üè∑Ô∏è Gi√° v√†o: {self.entry:.4f}\n"
                f"üìä Kh·ªëi l∆∞·ª£ng: {executed_qty}\n"
                f"üíµ Gi√° tr·ªã: {executed_qty * self.entry:.2f} USDT\n"
                f"‚öñÔ∏è ƒê√≤n b·∫©y: {self.lev}x\n"
                f"üéØ TP: {self.tp}% | üõ°Ô∏è SL: {self.dynamic_sl:.2f}%"
            )
            self.log(message)

        except Exception as e:
            self.position_open = False
            self.log(f"‚ùå L·ªói khi v√†o l·ªánh: {str(e)}")

# ========== QU·∫¢N L√ù BOT CH·∫†Y N·ªÄN V√Ä T∆Ø∆†NG T√ÅC TELEGRAM ==========
class BotManager:
    def __init__(self):
        self.ws_manager = WebSocketManager()
        self.bots = {}
        self.running = True
        self.start_time = time.time()
        self.user_states = {}  # L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng
        self.admin_chat_id = TELEGRAM_CHAT_ID
        
        self.log("üü¢ H·ªÜ TH·ªêNG BOT ƒê√É KH·ªûI ƒê·ªòNG")
        
        # B·∫Øt ƒë·∫ßu thread ki·ªÉm tra tr·∫°ng th√°i
        self.status_thread = threading.Thread(target=self._status_monitor, daemon=True)
        self.status_thread.start()
        
        # B·∫Øt ƒë·∫ßu thread l·∫Øng nghe Telegram
        self.telegram_thread = threading.Thread(target=self._telegram_listener, daemon=True)
        self.telegram_thread.start()
        
        # G·ª≠i menu ch√≠nh khi kh·ªüi ƒë·ªông
        if self.admin_chat_id:
            self.send_main_menu(self.admin_chat_id)

    def log(self, message):
        """Ghi log h·ªá th·ªëng v√† g·ª≠i Telegram"""
        logger.info(f"[SYSTEM] {message}")
        send_telegram(f"<b>SYSTEM</b>: {message}")

    def send_main_menu(self, chat_id):
        """G·ª≠i menu ch√≠nh cho ng∆∞·ªùi d√πng"""
        welcome = (
            "ü§ñ <b>BOT GIAO D·ªäCH FUTURES BINANCE</b>\n\n"
            "Ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn b√™n d∆∞·ªõi:"
        )
        send_telegram(welcome, chat_id, create_menu_keyboard())

    def add_bot(self, symbol, lev, percent, tp, sl, indicator_config=None):
        symbol = symbol.upper()
        if symbol in self.bots:
            self.log(f"‚ö†Ô∏è ƒê√£ c√≥ bot cho {symbol}")
            return False
            
        # Ki·ªÉm tra API key
        if not API_KEY or not API_SECRET:
            self.log("‚ùå Ch∆∞a c·∫•u h√¨nh API Key v√† Secret Key!")
            return False
            
        try:
            # Ki·ªÉm tra k·∫øt n·ªëi API
            price = get_current_price(symbol)
            if price <= 0:
                self.log(f"‚ùå Kh√¥ng th·ªÉ l·∫•y gi√° cho {symbol}")
                return False
            
            # Ki·ªÉm tra v·ªã th·∫ø hi·ªán t·∫°i
            positions = get_positions(symbol)
            if positions and any(float(pos.get('positionAmt', 0)) != 0 for pos in positions):
                self.log(f"‚ö†Ô∏è ƒê√£ c√≥ v·ªã th·∫ø m·ªü cho {symbol} tr√™n Binance")
                return False
            
            # T·∫°o bot m·ªõi
            bot = IndicatorBot(
                symbol, lev, percent, tp, sl, self.ws_manager
            )
            self.bots[symbol] = bot
            self.log(f"‚úÖ ƒê√£ th√™m bot: {symbol} | ƒêB: {lev}x | %: {percent} | TP/SL: {tp}%/{sl}%")
            return True
            
        except Exception as e:
            self.log(f"‚ùå L·ªói t·∫°o bot {symbol}: {str(e)}")
            return False

    def stop_bot(self, symbol):
        symbol = symbol.upper()
        bot = self.bots.get(symbol)
        if bot:
            bot.stop()
            if bot.status == "open":
                bot.close_position("‚õî D·ª´ng bot th·ªß c√¥ng")
            self.log(f"‚õî ƒê√£ d·ª´ng bot cho {symbol}")
            del self.bots[symbol]
            return True
        return False

    def stop_all(self):
        self.log("‚õî ƒêang d·ª´ng t·∫•t c·∫£ bot...")
        for symbol in list(self.bots.keys()):
            self.stop_bot(symbol)
        self.ws_manager.stop()
        self.running = False
        self.log("üî¥ H·ªá th·ªëng ƒë√£ d·ª´ng")

    def _status_monitor(self):
        """Ki·ªÉm tra v√† b√°o c√°o tr·∫°ng th√°i ƒë·ªãnh k·ª≥"""
        while self.running:
            try:
                # T√≠nh th·ªùi gian ho·∫°t ƒë·ªông
                uptime = time.time() - self.start_time
                hours, rem = divmod(uptime, 3600)
                minutes, seconds = divmod(rem, 60)
                uptime_str = f"{int(hours)}h {int(minutes)}m {int(seconds)}s"
                
                # B√°o c√°o s·ªë bot ƒëang ch·∫°y
                active_bots = [s for s, b in self.bots.items() if not b._stop]
                
                # B√°o c√°o s·ªë d∆∞ t√†i kho·∫£n
                balance = get_balance()
                
                # T·∫°o b√°o c√°o
                status_msg = (
                    f"üìä <b>B√ÅO C√ÅO H·ªÜ TH·ªêNG</b>\n"
                    f"‚è± Th·ªùi gian ho·∫°t ƒë·ªông: {uptime_str}\n"
                    f"ü§ñ S·ªë bot ƒëang ch·∫°y: {len(active_bots)}\n"
                    f"üìà Bot ho·∫°t ƒë·ªông: {', '.join(active_bots) if active_bots else 'Kh√¥ng c√≥'}\n"
                    f"üí∞ S·ªë d∆∞ kh·∫£ d·ª•ng: {balance:.2f} USDT"
                )
                send_telegram(status_msg)
                
                # Log chi ti·∫øt
                for symbol, bot in self.bots.items():
                    if bot.status == "open":
                        status_msg = (
                            f"üîπ <b>{symbol}</b>\n"
                            f"üìå H∆∞·ªõng: {bot.side}\n"
                            f"üè∑Ô∏è Gi√° v√†o: {bot.entry:.4f}\n"
                            f"üìä Kh·ªëi l∆∞·ª£ng: {abs(bot.qty)}\n"
                            f"‚öñÔ∏è ƒê√≤n b·∫©y: {bot.lev}x\n"
                            f"üéØ TP: {bot.tp}% | üõ°Ô∏è SL: {bot.dynamic_sl:.2f}%"
                        )
                        send_telegram(status_msg)
                
            except Exception as e:
                logger.error(f"L·ªói b√°o c√°o tr·∫°ng th√°i: {str(e)}")
            
            # Ki·ªÉm tra m·ªói 6 gi·ªù
            time.sleep(6 * 3600)

    def _telegram_listener(self):
        """L·∫Øng nghe v√† x·ª≠ l√Ω tin nh·∫Øn t·ª´ Telegram"""
        last_update_id = 0
        
        while self.running:
            try:
                # L·∫•y tin nh·∫Øn m·ªõi
                url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates?offset={last_update_id+1}&timeout=30"
                response = requests.get(url, timeout=35)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('ok'):
                        for update in data['result']:
                            update_id = update['update_id']
                            message = update.get('message', {})
                            chat_id = str(message.get('chat', {}).get('id'))
                            text = message.get('text', '').strip()
                            
                            # Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn t·ª´ admin
                            if chat_id != self.admin_chat_id:
                                continue
                            
                            # C·∫≠p nh·∫≠t ID tin nh·∫Øn cu·ªëi
                            if update_id > last_update_id:
                                last_update_id = update_id
                            
                            # X·ª≠ l√Ω tin nh·∫Øn
                            self._handle_telegram_message(chat_id, text)
                elif response.status_code == 409:
                    # X·ª≠ l√Ω xung ƒë·ªôt - ch·ªâ c√≥ m·ªôt instance c·ªßa bot c√≥ th·ªÉ l·∫Øng nghe
                    logger.error("L·ªói xung ƒë·ªôt: Ch·ªâ m·ªôt instance bot c√≥ th·ªÉ l·∫Øng nghe Telegram")
                    break
                
            except Exception as e:
                logger.error(f"L·ªói Telegram listener: {str(e)}")
                time.sleep(5)

    def _handle_telegram_message(self, chat_id, text):
        """X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng"""
        # L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng
        user_state = self.user_states.get(chat_id, {})
        current_step = user_state.get('step')
        
        # X·ª≠ l√Ω theo b∆∞·ªõc hi·ªán t·∫°i
        if current_step == 'waiting_symbol':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                symbol = text.upper()
                self.user_states[chat_id] = {
                    'step': 'waiting_leverage',
                    'symbol': symbol
                }
                send_telegram(f"Ch·ªçn ƒë√≤n b·∫©y cho {symbol}:", chat_id, create_leverage_keyboard())
        
        elif current_step == 'waiting_leverage':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            elif 'x' in text:
                leverage = int(text.replace('‚öñÔ∏è', '').replace('x', '').strip())
                user_state['leverage'] = leverage
                user_state['step'] = 'waiting_percent'
                send_telegram(
                    f"üìå C·∫∑p: {user_state['symbol']}\n‚öñÔ∏è ƒê√≤n b·∫©y: {leverage}x\n\nNh·∫≠p % s·ªë d∆∞ mu·ªën s·ª≠ d·ª•ng (1-100):",
                    chat_id,
                    create_cancel_keyboard()
                )
        
        elif current_step == 'waiting_percent':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                try:
                    percent = float(text)
                    if 1 <= percent <= 100:
                        user_state['percent'] = percent
                        user_state['step'] = 'waiting_tp'
                        send_telegram(
                            f"üìå C·∫∑p: {user_state['symbol']}\n‚öñÔ∏è ƒêB: {user_state['leverage']}x\nüìä %: {percent}%\n\nNh·∫≠p % Take Profit (v√≠ d·ª•: 10):",
                            chat_id,
                            create_cancel_keyboard()
                        )
                    else:
                        send_telegram("‚ö†Ô∏è Vui l√≤ng nh·∫≠p % t·ª´ 1-100", chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id)
        
        elif current_step == 'waiting_tp':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                try:
                    tp = float(text)
                    if tp > 0:
                        user_state['tp'] = tp
                        user_state['step'] = 'waiting_sl'
                        send_telegram(
                            f"üìå C·∫∑p: {user_state['symbol']}\n‚öñÔ∏è ƒêB: {user_state['leverage']}x\nüìä %: {user_state['percent']}%\nüéØ TP: {tp}%\n\nNh·∫≠p % Stop Loss (v√≠ d·ª•: 5):",
                            chat_id,
                            create_cancel_keyboard()
                        )
                    else:
                        send_telegram("‚ö†Ô∏è TP ph·∫£i l·ªõn h∆°n 0", chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id)
        
        elif current_step == 'waiting_sl':
            if text == '‚ùå H·ªßy b·ªè':
                self.user_states[chat_id] = {}
                send_telegram("‚ùå ƒê√£ h·ªßy th√™m bot", chat_id, create_menu_keyboard())
            else:
                try:
                    sl = float(text)
                    if sl > 0:
                        # Th√™m bot
                        symbol = user_state['symbol']
                        leverage = user_state['leverage']
                        percent = user_state['percent']
                        tp = user_state['tp']
                        
                        if self.add_bot(symbol, leverage, percent, tp, sl):
                            send_telegram(
                                f"‚úÖ <b>ƒê√É TH√äM BOT TH√ÄNH C√îNG</b>\n\n"
                                f"üìå C·∫∑p: {symbol}\n"
                                f"‚öñÔ∏è ƒê√≤n b·∫©y: {leverage}x\n"
                                f"üìä % S·ªë d∆∞: {percent}%\n"
                                f"üéØ TP: {tp}%\n"
                                f"üõ°Ô∏è SL: {sl}%",
                                chat_id,
                                create_menu_keyboard()
                            )
                        else:
                            send_telegram("‚ùå Kh√¥ng th·ªÉ th√™m bot, vui l√≤ng ki·ªÉm tra log", chat_id, create_menu_keyboard())
                        
                        # Reset tr·∫°ng th√°i
                        self.user_states[chat_id] = {}
                    else:
                        send_telegram("‚ö†Ô∏è SL ph·∫£i l·ªõn h∆°n 0", chat_id)
                except:
                    send_telegram("‚ö†Ô∏è Gi√° tr·ªã kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p s·ªë", chat_id)
        
        # X·ª≠ l√Ω c√°c l·ªánh ch√≠nh
        elif text == "üìä Danh s√°ch Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id)
            else:
                message = "ü§ñ <b>DANH S√ÅCH BOT ƒêANG CH·∫†Y</b>\n\n"
                for symbol, bot in self.bots.items():
                    status = "üü¢ M·ªü" if bot.status == "open" else "üü° Ch·ªù"
                    message += f"üîπ {symbol} | {status} | {bot.side}\n"
                send_telegram(message, chat_id)
        
        elif text == "‚ûï Th√™m Bot":
            self.user_states[chat_id] = {'step': 'waiting_symbol'}
            send_telegram("Ch·ªçn c·∫∑p coin:", chat_id, create_symbols_keyboard())
        
        elif text == "‚õî D·ª´ng Bot":
            if not self.bots:
                send_telegram("ü§ñ Kh√¥ng c√≥ bot n√†o ƒëang ch·∫°y", chat_id)
            else:
                message = "‚õî <b>CH·ªåN BOT ƒê·ªÇ D·ª™NG</b>\n\n"
                keyboard = []
                row = []
                
                for i, symbol in enumerate(self.bots.keys()):
                    message += f"üîπ {symbol}\n"
                    row.append({"text": f"‚õî {symbol}"})
                    if len(row) == 2 or i == len(self.bots) - 1:
                        keyboard.append(row)
                        row = []
                
                keyboard.append([{"text": "‚ùå H·ªßy b·ªè"}])
                
                send_telegram(
                    message, 
                    chat_id, 
                    {"keyboard": keyboard, "resize_keyboard": True, "one_time_keyboard": True}
                )
        
        elif text.startswith("‚õî "):
            symbol = text.replace("‚õî ", "").strip().upper()
            if symbol in self.bots:
                self.stop_bot(symbol)
                send_telegram(f"‚õî ƒê√£ g·ª≠i l·ªánh d·ª´ng bot {symbol}", chat_id, create_menu_keyboard())
            else:
                send_telegram(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y bot {symbol}", chat_id, create_menu_keyboard())
        
        elif text == "üí∞ S·ªë d∆∞ t√†i kho·∫£n":
            try:
                balance = get_balance()
                send_telegram(f"üí∞ <b>S·ªê D∆Ø KH·∫¢ D·ª§NG</b>: {balance:.2f} USDT", chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y s·ªë d∆∞: {str(e)}", chat_id)
        
        elif text == "üìà V·ªã th·∫ø ƒëang m·ªü":
            try:
                positions = get_positions()
                if not positions:
                    send_telegram("üì≠ Kh√¥ng c√≥ v·ªã th·∫ø n√†o ƒëang m·ªü", chat_id)
                    return
                
                message = "üìà <b>V·ªä TH·∫æ ƒêANG M·ªû</b>\n\n"
                for pos in positions:
                    position_amt = float(pos.get('positionAmt', 0))
                    if position_amt != 0:
                        symbol = pos.get('symbol', 'UNKNOWN')
                        entry = float(pos.get('entryPrice', 0))
                        side = "LONG" if position_amt > 0 else "SHORT"
                        pnl = float(pos.get('unRealizedProfit', 0))
                        
                        message += (
                            f"üîπ {symbol} | {side}\n"
                            f"üìä Kh·ªëi l∆∞·ª£ng: {abs(position_amt):.4f}\n"
                            f"üè∑Ô∏è Gi√° v√†o: {entry:.4f}\n"
                            f"üí∞ PnL: {pnl:.2f} USDT\n\n"
                        )
                
                send_telegram(message, chat_id)
            except Exception as e:
                send_telegram(f"‚ö†Ô∏è L·ªói l·∫•y v·ªã th·∫ø: {str(e)}", chat_id)
        
        # G·ª≠i l·∫°i menu n·∫øu kh√¥ng c√≥ l·ªánh ph√π h·ª£p
        elif text:
            self.send_main_menu(chat_id)

# ========== H√ÄM KH·ªûI CH·∫†Y CH√çNH ==========
def main():
    # Kh·ªüi t·∫°o h·ªá th·ªëng
    manager = BotManager()
    
    # Th√™m c√°c bot t·ª´ c·∫•u h√¨nh
    if BOT_CONFIGS:
        for config in BOT_CONFIGS:
            # X·ª≠ l√Ω c·∫£ c·∫•u h√¨nh c≈© v√† m·ªõi
            if isinstance(config, list):
                # C·∫•u h√¨nh c≈©: [symbol, lev, percent, tp, sl]
                manager.add_bot(*config[:5])
            elif isinstance(config, dict):
                # C·∫•u h√¨nh m·ªõi v·ªõi ch·ªâ b√°o
                manager.add_bot(
                    config['symbol'],
                    config['lev'],
                    config['percent'],
                    config['tp'],
                    config['sl']
                )
    else:
        manager.log("‚ö†Ô∏è Kh√¥ng c√≥ c·∫•u h√¨nh bot n√†o ƒë∆∞·ª£c t√¨m th·∫•y!")
    
    # Th√¥ng b√°o s·ªë d∆∞ ban ƒë·∫ßu
    try:
        balance = get_balance()
        manager.log(f"üí∞ S·ªê D∆Ø BAN ƒê·∫¶U: {balance:.2f} USDT")
    except Exception as e:
        manager.log(f"‚ö†Ô∏è L·ªói l·∫•y s·ªë d∆∞ ban ƒë·∫ßu: {str(e)}")
    
    try:
        # Gi·ªØ ch∆∞∆°ng tr√¨nh ch·∫°y
        while manager.running:
            time.sleep(1)
            
    except KeyboardInterrupt:
        manager.log("üëã Nh·∫≠n t√≠n hi·ªáu d·ª´ng t·ª´ ng∆∞·ªùi d√πng...")
    except Exception as e:
        manager.log(f"‚ö†Ô∏è L·ªñI H·ªÜ TH·ªêNG NGHI√äM TR·ªåNG: {str(e)}")
    finally:
        manager.stop_all()

if __name__ == "__main__":
    main()
